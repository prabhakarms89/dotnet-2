
name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
   branches: [ master ]
    
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [windows-2019]

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5
    
    - name: Restore NuGet packages
      run: nuget restore Structurizr.sln
    
    - name: Build the Solution
      run: msbuild Structurizr.sln /p:Configuration=Release  /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="../_build"

    #- name: Tar files
    #  run: tar -cvf published_webapp.tar ../_build
      
    #- name: Upload artifact for deployment job
    #  uses: actions/upload-artifact@v2
    #  with:
    #      name: published_webapp.tar
    #      path: ./published_webapp.tar
     
  sonar-analysis:
    runs-on: windows-2019
    needs: build
    
    steps:   

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
          java-version: 1.11

    - uses: actions/checkout@v2
      with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
     
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5
    
    - name: Restore NuGet packages
      run: nuget restore Structurizr.sln

    - name: Install SonarQube scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

    - name: Build and analyze
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      shell: powershell
      run: |
         .\.sonar\scanner\dotnet-sonarscanner begin /k:"ebopw-deployment" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
           msbuild OMS.sln /p:Configuration=Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"        
          
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   
      with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
